using System;
using System.Net;
using Rug.Osc;

namespace Rug
{
    /// <summary>
    /// The direction of a message.
    /// </summary>
    public enum Direction
    {
        /// <summary>
        /// Transmitted.
        /// </summary>
        Transmit,

        /// <summary>
        /// Received.
        /// </summary>
        Receive,

        /// <summary>
        /// Non-direction
        /// </summary>
        Action,
    }

    /// <summary>
    /// Type of report.
    /// </summary>
    public enum ReportType
    {
        /// <summary>
        /// Titles
        /// </summary>
        Title,

        /// <summary>
        /// Regular text.
        /// </summary>
        Normal,

        /// <summary>
        /// Verbose detail text.
        /// </summary>
        Detail,

        /// <summary>
        /// Error text.
        /// </summary>
        Error,

        /// <summary>
        /// Success text.
        /// </summary>
        Success,

        /// <summary>
        /// Info about an action that has been taken.
        /// </summary>
        Action,
    }

    public enum ReportVerbosity
    {
        Debug = 0,
        Detail = 1,
        Normal = 2,
        Emphasized = 3,
        ExceptionsOnly = 4,
    }

    public interface IOscMessageFilter
    {
        bool ShouldPrintMessage(OscMessage message);
    }

    /// <summary>
    /// Interface for reporting debugging and logging information.
    /// </summary>
    /// <autogeneratedoc />
    public interface IReporter
    {
        IOscMessageFilter OscMessageFilter { get; set; }

        ReportVerbosity ReportVerbosity { get; set; }

        void PrintBlankLine(ReportVerbosity verbosity);

        void PrintDebug(string format, params object[] args);

        void PrintDebug(Direction direction, IPEndPoint endPoint, string format, params object[] args);

        void PrintDebug(Direction direction, string ident, string format, params object[] args);

        void PrintDetail(string format, params object[] args);

        void PrintDetail(Direction direction, IPEndPoint endPoint, string format, params object[] args);

        void PrintDetail(Direction direction, string ident, string format, params object[] args);

        void PrintEmphasized(string format, params object[] args);

        void PrintEmphasized(Direction direction, IPEndPoint endPoint, string format, params object[] args);

        void PrintEmphasized(Direction direction, string ident, string format, params object[] args);

        void PrintError(string format, params object[] args);

        void PrintError(Direction direction, IPEndPoint endPoint, string format, params object[] args);

        void PrintError(Direction direction, string ident, string format, params object[] args);

        void PrintException(Exception ex, string format, params object[] args);

        void PrintNormal(string format, params object[] args);

        void PrintNormal(Direction direction, IPEndPoint endPoint, string format, params object[] args);

        void PrintNormal(Direction direction, string ident, string format, params object[] args);

        void PrintOscPackets(Direction direction, params OscPacket[] packets);

        void PrintOscPackets(Direction direction, IPEndPoint endPoint, params OscPacket[] packets);

        void PrintWarning(ReportVerbosity verbosity, string format, params object[] args);

        void PrintWarning(ReportVerbosity verbosity, Direction direction, IPEndPoint endPoint, string format, params object[] args);

        void PrintWarning(ReportVerbosity verbosity, Direction direction, string ident, string format, params object[] args);
    }
}