using System;
using System.Collections.Generic;

namespace Rug.Osc.Ahoy
{
    /// <summary>
    /// Interface IAhoyQuery
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for IAhoyQuery
    public interface IAhoyQuery : IDisposable, IEnumerable<AhoyServiceInfo>
    {
        /// <summary>
        /// Gets the <see cref="AhoyServiceInfo"/> at the specified index.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>AhoyServiceInfo.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for this
        AhoyServiceInfo this[int index] { get; }

        /// <summary>
        /// Gets the namespace.
        /// </summary>
        /// <value>The namespace.</value>
        string Namespace { get; } 

        /// <summary>
        /// Gets the count.
        /// </summary>
        /// <value>The count.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Count
        int Count { get; }

        /// <summary>
        /// Occurs when [any received].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AnyReceived
        event OscMessageEvent AnyReceived;

        /// <summary>
        /// Occurs when [message received].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageReceived
        event OscMessageEvent MessageReceived;

        /// <summary>
        /// Occurs when [message sent].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageSent
        event OscMessageEvent MessageSent;

        /// <summary>
        /// Occurs when [new service discovered].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for NewServiceDiscovered
        event AhoyServiceEvent ServiceDiscovered;

        /// <summary>
        /// Occurs when a service expires.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceExpired
        event AhoyServiceEvent ServiceExpired;

        /// <summary>
        /// Begins the search.
        /// </summary>
        /// <param name="sendInterval">The send interval.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for BeginSearch
        void BeginSearch(int sendInterval = 100);

        /// <summary>
        /// Ends the search.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for EndSearch
        void EndSearch();

        /// <summary>
        /// Begin the end of the search but do not wait for all threads to complete.
        /// </summary>
        void BeginEndSearch(); 

        ///// <summary>
        ///// Gets the enumerator.
        ///// </summary>
        ///// <returns>IEnumerator&lt;AhoyServiceInfo&gt;.</returns>
        ///// <autogeneratedoc />
        ///// TODO Edit XML Comment Template for GetEnumerator
        //IEnumerator<AhoyServiceInfo> GetEnumerator();

        /// <summary>
        /// Searches the specified send interval.
        /// </summary>
        /// <param name="sendInterval">The send interval.</param>
        /// <param name="timeout">The timeout.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Search
        void Search(int sendInterval = 100, int timeout = 500);
    }
}