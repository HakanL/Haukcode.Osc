using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Net;

namespace Rug.Osc.Ahoy
{
    /// <summary>
    /// Class AhoyService.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AhoyService
    public class AhoyService
    {
        /// <summary>
        /// The descriptor
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Descriptor
        public readonly string Descriptor;

        /// <summary>
        /// The listen port
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ListenPort
        public readonly int ListenPort;

        /// <summary>
        /// The send port
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SendPort
        public readonly int SendPort;

        public readonly string Namespace;

        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyService"/> class.
        /// </summary>
        /// <param name="descriptor">The descriptor.</param>
        /// <param name="sendPort">The send port.</param>
        /// <param name="listenPort">The listen port.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyService(string descriptor, int sendPort, int listenPort, string @namespace = null)
        {
            Descriptor = descriptor;
            SendPort = sendPort;
            ListenPort = listenPort;
            Namespace = null;
        }

        public bool IsValidForNamespace(string address)
        {
            if (address.Equals(AhoyConstants.Address) == true)
            {
                return true;
            }

            if (address.Equals(AhoyMessage.GetAhoyAddress(Namespace)) == true)
            {
                return true;
            }

            return false;
        }
    }

    /// <summary>
    /// Class AhoyServiceProvider.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AhoyServiceProvider
    public class AhoyServiceProvider : IDisposable, IEnumerable<AhoyService>
    {
        private static readonly bool isRunningOnMono;

        private readonly OscListener listener;

        private readonly IPAddress serviceIP;

        private readonly ConcurrentDictionary<string, AhoyService> services = new ConcurrentDictionary<string, AhoyService>();

        /// <summary>
        /// Occurs when [message received].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageReceived
        public event OscMessageEvent MessageReceived;

        /// <summary>
        /// Occurs when [message sent].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageSent
        public event OscMessageEvent MessageSent;

        /// <summary>
        /// Number of services. 
        /// </summary>
        public int Count => services.Count;

        static AhoyServiceProvider()
        {
            isRunningOnMono = Type.GetType("Mono.Runtime") != null;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyServiceProvider"/> class.
        /// </summary>
        /// <param name="adapterAddress">The adapter address.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyServiceProvider(IPAddress adapterAddress)
        {
            if (Equals(adapterAddress, IPAddress.Any))
            {
                try
                {
                    foreach (IPAddress address in System.Net.Dns.GetHostEntry(Environment.MachineName).AddressList)
                    {
                        if (address.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
                        {
                            continue;
                        }

                        serviceIP = address;
                        break;
                    }
                }
                catch
                {
                    serviceIP = IPAddress.Loopback;
                }
            }
            else
            {
                serviceIP = adapterAddress;
            }

            listener = isRunningOnMono == false ? 
                new OscListener(serviceIP, AhoyConstants.AhoyBroadcastPort) : 
                new OscListener(AhoyConstants.AhoyBroadcastPort);

            listener.Attach(AhoyConstants.Address, OnAhoy);

            listener.UnknownAddress += Listener_UnknownAddress;
        }

        private void Listener_UnknownAddress(object sender, UnknownAddressEventArgs e)
        {
            if (e.Address.StartsWith(AhoyConstants.Address + "/") == false)
            {
                return;
            }

            OnAhoy(e.Packet as OscMessage);
        }

        /// <summary>
        /// Adds the specified service.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Add
        public void Add(AhoyService service)
        {
            services[service.Descriptor] = service;
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Dispose
        public void Dispose()
        {
            Stop();
        }

        /// <summary>
        /// Removes the specified service.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Remove
        public void Remove(AhoyService service)
        {
            services.TryRemove(service.Descriptor, out AhoyService _);
        }

        /// <summary>
        /// Starts this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Start
        public void Start()
        {
            listener.Connect();
        }

        /// <summary>
        /// Stops this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Stop
        public void Stop()
        {
            listener.Dispose();
        }

        private void OnAhoy(OscMessage message)
        {
            MessageReceived?.Invoke(message);

            if (AhoyMessage.TryGetIPAddress(message, out IPAddress address) == false)
            {
                return;
            }

            if (Equals(address, IPAddress.Any))
            {
                return;
            }

            if (Equals(address, IPAddress.Broadcast))
            {
                return;
            }

            try
            {
                using (OscSender sender = new OscSender(address, 0, AhoyConstants.AhoyResponsePort))
                {
                    sender.Connect();

                    List<OscMessage> response = new List<OscMessage>();

                    const int headerSize = 0x12;
                    const int maxPackageSize = 1472;

                    int byteCount = headerSize;

                    foreach (AhoyService service in services.Values)
                    {
                        if (service.IsValidForNamespace(message.Address) == false)
                        {
                            continue;
                        }

                        OscMessage serviceResponse = AhoyMessage.CreateAhoyResponse(serviceIP, service.SendPort, service.ListenPort, service.Descriptor);

                        MessageSent?.Invoke(serviceResponse);

                        int size = serviceResponse.SizeInBytes;

                        if (byteCount + size > maxPackageSize)
                        {
                            sender.Send(new OscBundle(DateTime.Now, response.ToArray()));

                            response.Clear();
                            byteCount = headerSize;
                        }

                        response.Add(serviceResponse);
                        byteCount += size;
                    }

                    if (response.Count > 1)
                    {
                        sender.Send(new OscBundle(DateTime.Now, response.ToArray()));
                    }
                    else if (response.Count == 1)
                    {
                        sender.Send(response[0]);
                    }
                }
            }
            catch { }
        }

        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return (services.Values as IEnumerable).GetEnumerator();
        }

        /// <inheritdoc />
        public IEnumerator<AhoyService> GetEnumerator()
        {
            return services.Values.GetEnumerator();
        }
    }
}