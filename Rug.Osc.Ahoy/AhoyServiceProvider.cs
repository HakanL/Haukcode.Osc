using System;
using System.Collections.Generic;
using System.Net;

namespace Rug.Osc.Ahoy
{
    /// <summary>
    /// Class AhoyService.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AhoyService
    public class AhoyService
    {
        /// <summary>
        /// The descriptor
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Descriptor
        public readonly string Descriptor;

        /// <summary>
        /// The listen port
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ListenPort
        public readonly int ListenPort;

        /// <summary>
        /// The send port
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SendPort
        public readonly int SendPort;

        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyService"/> class.
        /// </summary>
        /// <param name="descriptor">The descriptor.</param>
        /// <param name="sendPort">The send port.</param>
        /// <param name="listenPort">The listen port.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyService(string descriptor, int sendPort, int listenPort)
        {
            Descriptor = descriptor;
            SendPort = sendPort;
            ListenPort = listenPort;
        }
    }

    /// <summary>
    /// Class AhoyServiceProvider.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AhoyServiceProvider
    public class AhoyServiceProvider : IDisposable
    {
        private static bool isRunningOnMono;

        private readonly object syncLock = new object();

        private OscListener listener;

        private IPAddress serviceIP;

        private Dictionary<string, AhoyService> services = new Dictionary<string, AhoyService>();

        /// <summary>
        /// Occurs when [message received].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageReceived
        public event OscMessageEvent MessageReceived;

        /// <summary>
        /// Occurs when [message sent].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageSent
        public event OscMessageEvent MessageSent;

        static AhoyServiceProvider()
        {
            isRunningOnMono = Type.GetType("Mono.Runtime") != null;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyServiceProvider"/> class.
        /// </summary>
        /// <param name="adapterAddress">The adapter address.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyServiceProvider(IPAddress adapterAddress)
        {
            if (adapterAddress == IPAddress.Any)
            {
                try
                {
                    foreach (IPAddress address in System.Net.Dns.GetHostEntry(Environment.MachineName).AddressList)
                    {
                        if (address.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
                        {
                            continue;
                        }

                        serviceIP = address;
                        break;
                    }
                }
                catch
                {
                    serviceIP = IPAddress.Loopback;
                }
            }
            else
            {
                serviceIP = adapterAddress;
            }

            if (isRunningOnMono == false)
            {
                // explicitly listen on the service IP
                listener = new OscListener(serviceIP, AhoyConstants.AhoyBroadcastPort);
            }
            else
            {
                // we can only use the any (0.0.0.0) address to listen when in mono
                listener = new OscListener(AhoyConstants.AhoyBroadcastPort);
            }

            listener.Attach(AhoyConstants.Address, OnAhoy);
        }

        /// <summary>
        /// Adds the specified service.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Add
        public void Add(AhoyService service)
        {
            lock (syncLock)
            {
                services.Add(service.Descriptor, service);
            }
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Dispose
        public void Dispose()
        {
            Stop();
        }

        /// <summary>
        /// Removes the specified service.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Remove
        public void Remove(AhoyService service)
        {
            lock (syncLock)
            {
                services.Remove(service.Descriptor);
            }
        }

        /// <summary>
        /// Starts this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Start
        public void Start()
        {
            listener.Connect();
        }

        /// <summary>
        /// Stops this instance.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Stop
        public void Stop()
        {
            listener.Dispose();
        }

        private void OnAhoy(OscMessage message)
        {
            if (MessageReceived != null)
            {
                MessageReceived(message);
            }

            IPAddress address;

            if (AhoyMessage.TryGetIPAddress(message, out address) == false)
            {
                return;
            }

            if (address == IPAddress.Any)
            {
                return;
            }

            if (address == IPAddress.Broadcast)
            {
                return;
            }

            try
            {
                using (OscSender sender = new OscSender(address, 0, AhoyConstants.AhoyResponsePort))
                {
                    sender.Connect();

                    lock (syncLock)
                    {
                        foreach (AhoyService service in services.Values)
                        {
                            OscMessage response = AhoyMessage.CreateAhoyResponse(serviceIP, service.SendPort, service.ListenPort, service.Descriptor);

                            if (MessageSent != null)
                            {
                                MessageSent(response);
                            }

                            sender.Send(response);
                        }
                    }
                }
            }
            catch { }
        }
    }
}