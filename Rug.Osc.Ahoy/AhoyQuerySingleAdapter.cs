using System;
using System.Collections.Generic;
using System.Net;
using System.Threading;

namespace Rug.Osc.Ahoy
{
    public delegate void AhoyServiceEvent(AhoyServiceInfo serviceInfo);

    /// <summary>
    /// Class AhoyUdpQuery.
    /// </summary>
    /// <seealso cref="Rug.Osc.Ahoy.IAhoyQuery" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AhoyUdpQuery
    internal class AhoyQuerySingleAdapter : IAhoyQuery
    {
        private readonly List<AhoyServiceInfo> ahoyServiceInfoList = new List<AhoyServiceInfo>();
        private readonly ManualResetEvent searchResetEvent = new ManualResetEvent(true);
        private readonly object syncLock = new object();
        private readonly object listLock = new object(); 
        private bool isSearching = false;
        private readonly int serviceExpiryPeriod;

        /// <summary>
        /// Gets the local address.
        /// </summary>
        /// <value>The local address.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LocalAddress
        public IPAddress NetworkAdapterIPAddress { get; private set; }

        /// <summary>
        /// Gets the count.
        /// </summary>
        /// <value>The count.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Count
        public int Count { get { return ahoyServiceInfoList.Count; } }

        public string Namespace { get; private set; }

        /// <summary>
        /// Gets the host address.
        /// </summary>
        /// <value>The host address.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HostAddress
        public IPAddress HostAddress { get; private set; }

        /// <summary>
        /// Gets the listen address.
        /// </summary>
        /// <value>The listen address.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ListenAddress
        public IPAddress ListenAddress { get; private set; }

        /// <summary>
        /// Gets the send address.
        /// </summary>
        /// <value>The send address.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SendAddress
        public IPAddress SendAddress { get; private set; }

        /// <summary>
        /// Gets the <see cref="AhoyServiceInfo"/> at the specified index.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>AhoyServiceInfo.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for this
        public AhoyServiceInfo this[int index]
        {
            get { return ahoyServiceInfoList[index]; }
        }

        /// <summary>
        /// Occurs when a message any received].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AnyReceived
        public event OscMessageEvent AnyReceived;

        /// <summary>
        /// Occurs when [message received].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageReceived
        public event OscMessageEvent MessageReceived;

        /// <summary>
        /// Occurs when a message is sent.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MessageSent
        public event OscMessageEvent MessageSent;

        /// <summary>
        /// Occurs when a new service is discovered.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for NewServiceDiscovered
        public event AhoyServiceEvent ServiceDiscovered;

        /// <summary>
        /// Occurs when a service expires.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceExpired
        public event AhoyServiceEvent ServiceExpired; 

        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyQuerySingleAdapter"/> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyQuerySingleAdapter(string @namespace, int serviceExpiryPeriod = 3000)
            : this(@namespace, IPAddress.Any, serviceExpiryPeriod)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyQuerySingleAdapter"/> class.
        /// </summary>
        /// <param name="networkAdapterIPAddress">The local address.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyQuerySingleAdapter(string @namespace, IPAddress networkAdapterIPAddress, int serviceExpiryPeriod = 3000)
        {
            Namespace = @namespace; 

            NetworkAdapterIPAddress = networkAdapterIPAddress;
            
            ListenAddress = NetworkAdapterIPAddress;
            SendAddress = NetworkAdapterIPAddress;
            HostAddress = NetworkAdapterIPAddress;

            this.serviceExpiryPeriod = serviceExpiryPeriod; 

            if (ListenAddress == IPAddress.Broadcast)
            {
                ListenAddress = IPAddress.Any;
            }

            if (SendAddress == IPAddress.Broadcast)
            {
                SendAddress = IPAddress.Any;
            }

            if (HostAddress == IPAddress.Any)
            {
                HostAddress = IPAddress.Broadcast;
            }
        }

        /// <summary>
        /// Begins the search.
        /// </summary>
        /// <param name="sendInterval">The interval.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for BeginSearch
        public void BeginSearch(int sendInterval = 100)
        {
            Thread thread = new Thread(delegate ()
            {
                try
                {
                    // create a listener on the AhoyResponsePort
                    using (Rug.Osc.OscListener listener = new Rug.Osc.OscListener(ListenAddress, AhoyConstants.AhoyResponsePort))
                    {
                        SetupListener(listener);

                        using (OscSender sender = CreateSender())
                        {
                            sender.Connect();

                            while (isSearching == true)
                            {
                                // Broadcast a /ahoy message to the AhoyBroadcastPort
                                BroadcastAhoy(sender);

                                CheckForExpiredServices(); 

                                System.Threading.Thread.CurrentThread.Join(sendInterval);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    //throw new Exception("Could not complete ahoy query.", ex);
                }
                finally
                {
                    isSearching = false;
                    searchResetEvent.Set();
                }
            });

            thread.Name = "Ahoy Query Single Adapter " + NetworkAdapterIPAddress.ToString(); 

            lock (syncLock)
            {
                if (isSearching == true)
                {
                    throw new Exception("A asynchronous search is already in progress.");
                }

                searchResetEvent.Reset();

                isSearching = true;
                thread.Start();
            }
        }

        public void Dispose()
        {
            EndSearch();
        }

        /// <summary>
        /// Ends the search.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for EndSearch
        public void EndSearch()
        {
            lock (syncLock)
            {
                isSearching = false;

                searchResetEvent.WaitOne();
            }
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetEnumerator
        public IEnumerator<AhoyServiceInfo> GetEnumerator()
        {
            return ahoyServiceInfoList.GetEnumerator();
        }

        /// <summary>
        /// Searches the specified interval.
        /// </summary>
        /// <param name="sendInterval">The interval in milliseconds.</param>
        /// <param name="timeout">Search period in milliseconds.</param>
        /// <exception cref="System.Exception">
        /// A asynchronous search is already in progress.
        /// or
        /// Could not complete ahoy query.
        /// </exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Search
        public void Search(int sendInterval = 100, int timeout = 500)
        {
            lock (syncLock)
            {
                if (isSearching == true)
                {
                    throw new Exception("A asynchronous search is already in progress.");
                }

                try
                {
                    // create a listener on the AhoyResponsePort
                    using (Rug.Osc.OscListener listener = new Rug.Osc.OscListener(ListenAddress, AhoyConstants.AhoyResponsePort))
                    {
                        SetupListener(listener);

                        DateTime startTIme = DateTime.Now;

                        using (OscSender sender = CreateSender())
                        {
                            sender.Connect();

                            while ((DateTime.Now - startTIme).TotalMilliseconds < timeout)
                            {
                                // Broadcast a /ahoy message to the AhoyBroadcastPort
                                BroadcastAhoy(sender);

                                CheckForExpiredServices();

                                System.Threading.Thread.CurrentThread.Join(sendInterval);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Could not complete ahoy query.", ex);
                }
                finally
                {
                }
            }
        }

        private void CheckForExpiredServices()
        {
            List<AhoyServiceInfo> removedServices = new List<AhoyServiceInfo>(); 

            lock (listLock)
            {
                //DateTime expiryTimeThreshold = DateTime.Now.Subtract(

                for (int i = ahoyServiceInfoList.Count - 1; i >= 0; i--)
                {
                    if (ahoyServiceInfoList[i].ExpiryDateTime >= DateTime.Now)
                    {
                        continue; 
                    }

                    removedServices.Add(ahoyServiceInfoList[i]); 
                    ahoyServiceInfoList.RemoveAt(i);
                }
            }

            foreach (AhoyServiceInfo removed in removedServices)
            {
                ServiceExpired?.Invoke(removed); 
            }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return (ahoyServiceInfoList as System.Collections.IEnumerable).GetEnumerator();
        }

        private void BroadcastAhoy(OscSender sender)
        {
            // send an /ahoy to any devices that are listening
            OscMessage msg = AhoyMessage.CreateAhoyBroadcast(HostAddress, Namespace);

            OnMessageSent(msg);

            sender.Send(msg);
        }

        private OscSender CreateSender()
        {
            return new OscSender(SendAddress, 0, IPAddress.Broadcast, AhoyConstants.AhoyBroadcastPort, OscSocket.DefaultMulticastTimeToLive, OscSender.DefaultMessageBufferSize, OscSocket.DefaultPacketSize);
        }

        private void OnMessageReceived(OscMessage message)
        {
            MessageReceived?.Invoke(message);
        }

        private void OnMessageSent(OscMessage message)
        {
            MessageSent?.Invoke(message);
        }

        private void SetupListener(OscListener listener)
        {
            // listen for /ahoy messages
            listener.Attach(AhoyMessage.GetAhoyAddress(Namespace), delegate (OscMessage message)
            {
                OnMessageReceived(message);

                AhoyServiceInfo serviceInfo;

                if (AhoyMessage.TryGetAhoyServiceInfo(NetworkAdapterIPAddress, message, serviceExpiryPeriod, out serviceInfo) == false)
                {
                    return;
                }

                lock (listLock)
                {
                    if (ahoyServiceInfoList.Contains(serviceInfo) == false)
                    {
                        ahoyServiceInfoList.Add(serviceInfo);

                        ServiceDiscovered?.Invoke(serviceInfo);
                    }
                    else
                    {
                        ahoyServiceInfoList[ahoyServiceInfoList.IndexOf(serviceInfo)].Refresh();
                    }
                }
            });

            listener.Connect();
        }
    }
}