using System;
using System.Net;

namespace Rug.Osc.Ahoy
{
    /// <summary>
    /// Ahoy Service Information
    /// </summary>
    public class AhoyServiceInfo : IEquatable<AhoyServiceInfo>
    {
        private readonly int expiryPeriod;

        public readonly IPAddress NetworkAdapterIPAddress; 

        /// <summary>
        /// The address
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Address
        public readonly IPAddress Address;

        /// <summary>
        /// The descriptor
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Descriptor
        public readonly string Descriptor;

        /// <summary>
        /// The listen port
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ListenPort
        public readonly int ListenPort;

        /// <summary>
        /// The namespace
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Namespace
        public readonly string Namespace;

        /// <summary>
        /// The properties
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Properties
        public readonly object[] Properties;

        /// <summary>
        /// The send port
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SendPort
        public readonly int SendPort;

        /// <summary>
        /// The time stamp of most recent message.
        /// </summary>
        public DateTime ExpiryDateTime { get; private set; } 
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AhoyServiceInfo"/> struct.
        /// </summary>
        /// <param name="address">The address.</param>
        /// <param name="listenPort">The listen port.</param>
        /// <param name="sendPort">The send port.</param>
        /// <param name="descriptor">The descriptor.</param>
        /// <param name="namespace">The namespace.</param>
        /// <param name="properties">The properties.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AhoyServiceInfo(IPAddress networkAdapterIPAddress, IPAddress address, int listenPort, int sendPort, string descriptor, string @namespace, object[] properties, int expiryPeriod)
        {
            NetworkAdapterIPAddress = networkAdapterIPAddress; 

            Address = address;
            ListenPort = listenPort;
            SendPort = sendPort;

            Descriptor = descriptor;
            Namespace = @namespace;
            Properties = properties;
            this.expiryPeriod = expiryPeriod;

            ExpiryDateTime = DateTime.Now.AddMilliseconds(expiryPeriod); 
        }

        public void Refresh()
        {
            ExpiryDateTime = DateTime.Now.AddMilliseconds(expiryPeriod);
        }

        /// <summary>
        /// Determines whether the specified <see cref="System.Object" /> is equal to this instance.
        /// </summary>
        /// <param name="obj">The object to compare with the current instance.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Equals
        public override bool Equals(object obj)
        {
            if (obj is AhoyServiceInfo)
            {
                return Equals((AhoyServiceInfo)obj);
            }
            else
            {
                return base.Equals(obj);
            }
        }

        /// <summary>
        /// Equalses the specified other.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Equals
        public bool Equals(AhoyServiceInfo other)
        {
            return GetHashCode() == other.GetHashCode();
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetHashCode
        public override int GetHashCode()
        {
            return ToString().GetHashCode();
        }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ToString
        public override string ToString()
        {
            return string.Format("{0}, {1}, {2}, {3}", Descriptor, Address, ListenPort, SendPort);
        }
    }
}